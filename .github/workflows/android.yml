name: Build Android

env:
  path: android
  module: app
  ANDROID_PACKAGE_NAME: ${{ secrets.ANDROID_PACKAGE_NAME }}
  ANDROID_KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASS }}

on:
  workflow_dispatch:

jobs:
  build:
    name: Build Android
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'jetbrains'
          java-version: '21'

      - name: Change wrapper permissions
        working-directory: ${{ env.path }}
        run: chmod +x ./gradlew

      # Change bundle id for easy testing of this workflow when used as a template
      - name: Change bundle id
        if: ${{ env.ANDROID_PACKAGE_NAME != '' }}
        continue-on-error: true
        working-directory: ${{ env.path }}/${{ env.module }}
        run: |
          sed -i -E "s/applicationId = \"jd.boiv.in.test\"/applicationId = \"${{ secrets.ANDROID_PACKAGE_NAME }}\"/" build.gradle.kts

      #- name: Build APK
      #  working-directory: ${{ env.path }}
      #  run: ./gradlew assembleRelease

      - name: Build AAB
        working-directory: ${{ env.path }}
        run: ./gradlew bundleRelease
      
      - name: Rename files
        run: |
          mkdir build
          find "${{ env.path }}/${{ env.module }}/build/outputs/bundle/release" -name '*.aab' -exec mv '{}' build/android.aab \;

      - name: Save .keystore
        if: ${{ env.ANDROID_KEYSTORE_PASS != '' }}
        working-directory: build
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > .keystore

      # Convert PKCS12 keystore to JKS (if possible)
      - name: Convert keystore
        continue-on-error: true
        if: ${{ env.ANDROID_KEYSTORE_PASS != '' }}
        working-directory: build
        run: |
          keytool -importkeystore -srckeystore .keystore -destkeystore keystore.jks -srcstoretype PKCS12 \
          -deststoretype jks -srcstorepass ${{ secrets.ANDROID_KEYSTORE_PASS }} -deststorepass ${{ secrets.ANDROID_KEYSTORE_PASS }} \
          -srcalias ${{ secrets.ANDROID_KEYALIAS_NAME }} -destalias ${{ secrets.ANDROID_KEYALIAS_NAME }} \
          -srckeypass ${{ secrets.ANDROID_KEYALIAS_PASS }} -destkeypass ${{ secrets.ANDROID_KEYALIAS_PASS }}
          rm .keystore
          mv keystore.jks .keystore

      - name: Unsign AAB
        if: ${{ env.ANDROID_KEYSTORE_PASS != '' }}
        continue-on-error: true
        working-directory: build
        run: |
          zip -d android.aab META-INF/\*

      - name: Sign AAB
        if: ${{ env.ANDROID_KEYSTORE_PASS != '' }}
        working-directory: build
        run: |
          jarsigner -sigalg SHA256withRSA -digestalg SHA-256 \
          -keystore keystore.jks -storepass "${{ secrets.ANDROID_KEYSTORE_PASS }}" -keypass "${{ secrets.ANDROID_KEYALIAS_PASS }}" \
          "android.aab" "${{ secrets.ANDROID_KEYALIAS_NAME }}"

      # Download bundletool to generate a .APK from the .AAB for external distribution
      - name: Generate .APK (signed)
        if: ${{ env.ANDROID_KEYSTORE_PASS != '' }}
        working-directory: build
        run: |
          json=$(curl -s https://api.github.com/repos/google/bundletool/releases/latest)
          downloadUrl=$(echo $json | jq -r ".assets | .[].browser_download_url")
          curl $downloadUrl -4 -sL -o 'bundletool.jar'

          java -jar bundletool.jar build-apks --bundle=android.aab --output=android.apks \
          --mode=universal \
          --ks=.keystore \
          --ks-pass=${{ secrets.ANDROID_KEYALIAS_PASS }} \
          --ks-key-alias=${{ secrets.ANDROID_KEYALIAS_NAME }} \
          --key-pass=${{ secrets.ANDROID_KEYSTORE_PASS }}

          unzip -p android.apks universal.apk > android.apk
          rm android.apks
          rm bundletool.jar

      - name: Generate .APK (unsigned)
        if: ${{ env.ANDROID_KEYSTORE_PASS == '' }}
        working-directory: build
        run: |
          json=$(curl -s https://api.github.com/repos/google/bundletool/releases/latest)
          downloadUrl=$(echo $json | jq -r ".assets | .[].browser_download_url")
          curl $downloadUrl -4 -sL -o 'bundletool.jar'

          java -jar bundletool.jar build-apks --bundle=android.aab --output=android.apks --mode=universal

          unzip -p android.apks universal.apk > android.apk
          rm android.apks
          rm bundletool.jar

      - name: Cleanup
        working-directory: build
        run: |
          rm -f .keystore

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-android
          path: build